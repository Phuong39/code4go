// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetUserOrderReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserOrderReq) Reset()         { *m = GetUserOrderReq{} }
func (m *GetUserOrderReq) String() string { return proto.CompactTextString(m) }
func (*GetUserOrderReq) ProtoMessage()    {}
func (*GetUserOrderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}

func (m *GetUserOrderReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserOrderReq.Unmarshal(m, b)
}
func (m *GetUserOrderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserOrderReq.Marshal(b, m, deterministic)
}
func (m *GetUserOrderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserOrderReq.Merge(m, src)
}
func (m *GetUserOrderReq) XXX_Size() int {
	return xxx_messageInfo_GetUserOrderReq.Size(m)
}
func (m *GetUserOrderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserOrderReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserOrderReq proto.InternalMessageInfo

func (m *GetUserOrderReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserOrderReply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	OrderId              []int64  `protobuf:"varint,2,rep,packed,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserOrderReply) Reset()         { *m = GetUserOrderReply{} }
func (m *GetUserOrderReply) String() string { return proto.CompactTextString(m) }
func (*GetUserOrderReply) ProtoMessage()    {}
func (*GetUserOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{1}
}

func (m *GetUserOrderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserOrderReply.Unmarshal(m, b)
}
func (m *GetUserOrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserOrderReply.Marshal(b, m, deterministic)
}
func (m *GetUserOrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserOrderReply.Merge(m, src)
}
func (m *GetUserOrderReply) XXX_Size() int {
	return xxx_messageInfo_GetUserOrderReply.Size(m)
}
func (m *GetUserOrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserOrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserOrderReply proto.InternalMessageInfo

func (m *GetUserOrderReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetUserOrderReply) GetOrderId() []int64 {
	if m != nil {
		return m.OrderId
	}
	return nil
}

type CompleteOrderReq struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompleteOrderReq) Reset()         { *m = CompleteOrderReq{} }
func (m *CompleteOrderReq) String() string { return proto.CompactTextString(m) }
func (*CompleteOrderReq) ProtoMessage()    {}
func (*CompleteOrderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{2}
}

func (m *CompleteOrderReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompleteOrderReq.Unmarshal(m, b)
}
func (m *CompleteOrderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompleteOrderReq.Marshal(b, m, deterministic)
}
func (m *CompleteOrderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteOrderReq.Merge(m, src)
}
func (m *CompleteOrderReq) XXX_Size() int {
	return xxx_messageInfo_CompleteOrderReq.Size(m)
}
func (m *CompleteOrderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteOrderReq.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteOrderReq proto.InternalMessageInfo

func (m *CompleteOrderReq) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type CompleteOrderReply struct {
	OrderId              int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AmountMoney          float32  `protobuf:"fixed32,3,opt,name=amount_money,json=amountMoney,proto3" json:"amount_money,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompleteOrderReply) Reset()         { *m = CompleteOrderReply{} }
func (m *CompleteOrderReply) String() string { return proto.CompactTextString(m) }
func (*CompleteOrderReply) ProtoMessage()    {}
func (*CompleteOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{3}
}

func (m *CompleteOrderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompleteOrderReply.Unmarshal(m, b)
}
func (m *CompleteOrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompleteOrderReply.Marshal(b, m, deterministic)
}
func (m *CompleteOrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteOrderReply.Merge(m, src)
}
func (m *CompleteOrderReply) XXX_Size() int {
	return xxx_messageInfo_CompleteOrderReply.Size(m)
}
func (m *CompleteOrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteOrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteOrderReply proto.InternalMessageInfo

func (m *CompleteOrderReply) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *CompleteOrderReply) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CompleteOrderReply) GetAmountMoney() float32 {
	if m != nil {
		return m.AmountMoney
	}
	return 0
}

func init() {
	proto.RegisterType((*GetUserOrderReq)(nil), "client.GetUserOrderReq")
	proto.RegisterType((*GetUserOrderReply)(nil), "client.GetUserOrderReply")
	proto.RegisterType((*CompleteOrderReq)(nil), "client.CompleteOrderReq")
	proto.RegisterType((*CompleteOrderReply)(nil), "client.CompleteOrderReply")
}

func init() { proto.RegisterFile("order.proto", fileDescriptor_cd01338c35d87077) }

var fileDescriptor_cd01338c35d87077 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x2f, 0x4a, 0x49,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x51,
	0xd2, 0xe2, 0xe2, 0x77, 0x4f, 0x2d, 0x09, 0x2d, 0x4e, 0x2d, 0xf2, 0x07, 0xc9, 0x06, 0xa5, 0x16,
	0x0a, 0x89, 0x73, 0xb1, 0x97, 0x16, 0xa7, 0x16, 0xc5, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0x30, 0x07, 0xb1, 0x81, 0xb8, 0x9e, 0x29, 0x4a, 0x4e, 0x5c, 0x82, 0xa8, 0x6a, 0x0b, 0x72, 0x2a,
	0x85, 0x84, 0xb8, 0x58, 0x92, 0xf3, 0x53, 0x52, 0xc1, 0x4a, 0x59, 0x83, 0xc0, 0x6c, 0x21, 0x49,
	0x2e, 0x0e, 0xb0, 0x5d, 0x20, 0x23, 0x98, 0x14, 0x98, 0x35, 0x98, 0x83, 0xd8, 0xc1, 0x7c, 0xcf,
	0x14, 0x25, 0x5d, 0x2e, 0x01, 0xe7, 0xfc, 0xdc, 0x82, 0x9c, 0xd4, 0x92, 0x54, 0xb8, 0x85, 0xc8,
	0xca, 0x21, 0x36, 0xc2, 0x95, 0x67, 0x73, 0x09, 0xa1, 0x29, 0x07, 0xd9, 0x89, 0x5b, 0x03, 0xb2,
	0xe3, 0x99, 0x90, 0x1d, 0x2f, 0xa4, 0xc8, 0xc5, 0x93, 0x98, 0x9b, 0x5f, 0x9a, 0x57, 0x12, 0x9f,
	0x9b, 0x9f, 0x97, 0x5a, 0x29, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x14, 0xc4, 0x0d, 0x11, 0xf3, 0x05,
	0x09, 0x19, 0xcd, 0x64, 0x84, 0x9a, 0xeb, 0x58, 0x90, 0x29, 0xe4, 0xc2, 0xc5, 0x83, 0xec, 0x59,
	0x21, 0x71, 0x3d, 0x48, 0x88, 0xe9, 0xa1, 0x05, 0x97, 0x94, 0x24, 0x76, 0x89, 0x82, 0x9c, 0x4a,
	0x25, 0x06, 0x21, 0x77, 0x2e, 0x5e, 0x14, 0xf7, 0x0b, 0x49, 0xc0, 0x54, 0xa3, 0x87, 0x82, 0x94,
	0x14, 0x0e, 0x19, 0xb0, 0x41, 0x49, 0x6c, 0xe0, 0x68, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x8f, 0x83, 0xd3, 0x3b, 0xc5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderApiClient is the client API for OrderApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderApiClient interface {
	GetUserOrder(ctx context.Context, in *GetUserOrderReq, opts ...grpc.CallOption) (*GetUserOrderReply, error)
	CompleteOrder(ctx context.Context, in *CompleteOrderReq, opts ...grpc.CallOption) (*CompleteOrderReply, error)
}

type orderApiClient struct {
	cc *grpc.ClientConn
}

func NewOrderApiClient(cc *grpc.ClientConn) OrderApiClient {
	return &orderApiClient{cc}
}

func (c *orderApiClient) GetUserOrder(ctx context.Context, in *GetUserOrderReq, opts ...grpc.CallOption) (*GetUserOrderReply, error) {
	out := new(GetUserOrderReply)
	err := c.cc.Invoke(ctx, "/client.orderApi/GetUserOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderApiClient) CompleteOrder(ctx context.Context, in *CompleteOrderReq, opts ...grpc.CallOption) (*CompleteOrderReply, error) {
	out := new(CompleteOrderReply)
	err := c.cc.Invoke(ctx, "/client.orderApi/CompleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderApiServer is the server API for OrderApi service.
type OrderApiServer interface {
	GetUserOrder(context.Context, *GetUserOrderReq) (*GetUserOrderReply, error)
	CompleteOrder(context.Context, *CompleteOrderReq) (*CompleteOrderReply, error)
}

// UnimplementedOrderApiServer can be embedded to have forward compatible implementations.
type UnimplementedOrderApiServer struct {
}

func (*UnimplementedOrderApiServer) GetUserOrder(ctx context.Context, req *GetUserOrderReq) (*GetUserOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrder not implemented")
}
func (*UnimplementedOrderApiServer) CompleteOrder(ctx context.Context, req *CompleteOrderReq) (*CompleteOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteOrder not implemented")
}

func RegisterOrderApiServer(s *grpc.Server, srv OrderApiServer) {
	s.RegisterService(&_OrderApi_serviceDesc, srv)
}

func _OrderApi_GetUserOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).GetUserOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.orderApi/GetUserOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).GetUserOrder(ctx, req.(*GetUserOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderApi_CompleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).CompleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.orderApi/CompleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).CompleteOrder(ctx, req.(*CompleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.orderApi",
	HandlerType: (*OrderApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserOrder",
			Handler:    _OrderApi_GetUserOrder_Handler,
		},
		{
			MethodName: "CompleteOrder",
			Handler:    _OrderApi_CompleteOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
